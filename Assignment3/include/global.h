#pragma once
#include <GL/glut.h>
#include <math.h>
#define X_MAX 600
#define Y_MAX 400
#define VERTEX_NUM 101
#define POLYGON_NUM 100
#define X_POSITION 200
#define Y_POSITION 200
#define PI 3.14159265

enum Movement
{
    NONE = 0,
    UP = 1,
    DOWN = 2,
    RIGHT = 4,
    LEFT = 8,
    CCW_ROTATE = 16,
    CW_ROTATE = 32,
    VERT_GROWTH = 64,
    VERT_SHRINK = 128,
    HOR_GROWTH = 256,
    HOR_SHRINK = 512
};

enum FillPattern
{
    SOLID = 0,
    FLY = 1,
    HATCHED = 2,
    HALFTONE = 3
};

enum ColorPattern
{
    SOLIDCOLOR = 0,
    GRADIENTCOLOR = 1
};

typedef struct
{
    GLfloat r, g, b, a;
}
Color;

typedef struct
{
    double x, y;
}
Vertex;

typedef struct
{
    uint mode = 0;  // current movement
    uint pastMode = 0;  // movement before bouncing

    double xSpeed;
    double ySpeed;
    double rotSpeed;
    double bouncePeriod;
    double shrinkFactor;
}
MovementConfig;

typedef struct
{
    int numFillColors = 0;  // total number of colors to fill the polygon
    int numBorderColors = 0;  // total number of colors for the polygon's border

    ColorPattern fillColorPattern;  // solid fill or gradient fill
    ColorPattern borderColorPattern;  // solid border or gradient border

    FillPattern fillPattern;  // solid or fly or hatched or halftone
    GLushort borderPattern;  // the border pattern as a hex number

    Color fillColors[VERTEX_NUM];  // fill color list
    Color borderColors[VERTEX_NUM];  // border color list
}
ShadedPolygonDrawConfig;

typedef struct
{
    int numVertices;  // total number of vertices in the polygon

    double centroidX, centroidY;
    double tx = 0, ty = 0,  // shift vector
           rtheta = 0,  // rotation angle
           sx = 1, sy = 1;  // scale factor

    Vertex vertices[VERTEX_NUM];  // vertex list
    ShadedPolygonDrawConfig drawConfig;  // configuration for drawing the polygon

    MovementConfig moveConfig;  // configuration for the movement of the polygon
}
ShadedPolygon;

void polygonCentroid2(int polygonIndex, int* x, int* y);
void polygonContainingRectangle(
    int polygonIndex, double* xFrom, double* xTo, double* yFrom, double* yTo);
void drawPolygon(int polygonIndex);

static GLubyte fly[] = {
    //1024 bits or 128 bytes - represents a fill mask
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
    0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
    0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
    0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
    0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
    0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
    0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
    0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
    0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
    0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
    0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08
};

static GLubyte hatched[] = {
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff,
    0xff, 0x00, 0xff, 0x00,
    0x00, 0xff, 0x00, 0xff
};

static GLubyte solid[] = {
    0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff,0xff, 0xff, 0xff, 0xff
};

static GLubyte halftone[] = {
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55
};
